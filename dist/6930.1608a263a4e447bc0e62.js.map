{"version":3,"file":"6930.1608a263a4e447bc0e62.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/util/localization/format.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"j9SVp5No\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\",\"modalDialog\":\"MFXAwnxJ\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog, styles.root)}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size=\"huge\"\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getSenderTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(getGlobal(), modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  filterUsersByName, isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = [\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    const filteredContactIds = filterUsersByName(combinedIds, usersById, searchQuery);\n\n    return sortChatIds(unique(filteredContactIds).filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"balance\":\"LitvQduT\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: number;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className }: OwnProps) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.balance, className)}>\n      <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n      <div className={styles.balanceBottom}>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined ? formatInteger(balance) : '…'}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"subtitle\":\"YN2J8dw6\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{getSenderTitle(lang, peer)}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {title}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\n\nexport function getTransactionTitle(lang: OldLangFn, transaction: ApiStarsTransaction) {\n  if (transaction.extendedMedia) return lang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || lang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return lang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return lang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return lang('StarsGiftSent');\n  if (transaction.isGift) return lang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return transaction.stars < 0 ? lang('Gift2TransactionSent') : lang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || lang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getSenderTitle } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getTransactionTitle } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getSenderTitle(lang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || lang(customPeer.titleKey!);\n      description = lang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = lang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = lang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = lang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [lang, peer, transaction]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {extendedMedia ? <PaidMediaThumb media={extendedMedia} isTransactionPreview />\n          : <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />}\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        <p className={styles.description}>{data.description}</p>\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, lang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span className={buildClassName(styles.amount, stars < 0 ? styles.negative : styles.positive)}>\n          {formatStarsTransactionAmount(stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS: TabWithProperties[] = [\n  { title: 'StarsTransactionsAll' },\n  { title: 'StarsTransactionsIncoming' },\n  { title: 'StarsTransactionsOutgoing' },\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const user = selectUser(global, originGift.userId);\n      if (!user) return undefined;\n      return oldLang('StarsNeededTextGift', getUserFullName(user));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal className={styles.root} isOpen={isOpen} onClose={closeStarsBalanceModal}>\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              className={buildClassName(styles.starButton, 'settings-main-menu-star')}\n              color=\"translucent\"\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              <StarIcon className=\"icon\" type=\"gold\" size=\"big\" />\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={TRANSACTION_TABS}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React from '../../lib/teact/teact';\n\nimport type { LangFn } from './types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../config';\n\nimport Icon from '../../components/common/icons/Icon';\nimport StarIcon from '../../components/common/icons/StarIcon';\n\nexport function formatStarsAsText(lang: LangFn, amount: number) {\n  return lang('StarsAmountText', { amount }, { pluralValue: amount });\n}\n\nexport function formatStarsAsIcon(lang: LangFn, amount: number, asFont?: boolean) {\n  const icon = asFont\n    ? <Icon name=\"star\" className=\"star-amount-icon\" />\n    : <StarIcon type=\"gold\" className=\"star-amount-icon\" size=\"adaptive\" />;\n  return lang('StarsAmount', { amount }, {\n    withNodes: true,\n    specialReplacement: {\n      [STARS_ICON_PLACEHOLDER]: icon,\n    },\n  });\n}\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PickerSelectedItem className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, true),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"starsHeader\":\"VqKkGnpy\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer, selectStarGiftSticker,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { getTransactionTitle } from '../helpers/transaction';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo,\n    } = transaction;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, transaction);\n\n    const messageLink = peer && transaction.messageId\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !topSticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && topSticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={topSticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n            nonInteractive\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"jumbo\" />\n        )}\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span className={buildClassName(styles.amount, transaction.stars < 0 ? styles.negative : styles.positive)}>\n            {formatStarsTransactionAmount(transaction.stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(transaction.stars < 0 || transaction.isMyGift ? 'Stars.Transaction.To'\n        : peerId ? 'Star.Transaction.From' : 'Stars.Transaction.Via'),\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, peer, topSticker, canPlayAnimatedEmojis]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount);\n\n    const starGiftStickerId = modal?.transaction.starGift?.stickerId;\n    const starGiftSticker = starGiftStickerId && selectStarGiftSticker(global, starGiftStickerId);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starGiftSticker || starsGiftSticker,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"starsHeader\":\"gLkKCjkD\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={buildClassName(styles.header, styles.starsHeader)}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"jumbo\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress} />\n      <Sparkles preset=\"progress\" className={styles.sparkles} />\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectChatMessage, selectUser } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: number;\n  defaultPrivacy?: boolean;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMe?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiUser;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldShowUp, setShouldShowUp] = useState(true);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const handleAnonimityChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldShowUp(e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMe);\n    if (currentReactor) {\n      setShouldShowUp(!currentReactor.isAnonymous);\n      return;\n    }\n\n    setShouldShowUp(defaultPrivacy || true);\n  }, [defaultPrivacy, message?.reactions?.topReactors]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: !shouldShowUp,\n    });\n    closePaidReactionModal();\n  });\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasMe = false;\n\n    all.forEach((reactor) => {\n      const user = reactor.peerId ? selectUser(global, reactor.peerId) : undefined;\n      if (!user && !reactor.isAnonymous && !reactor.isMe) return;\n\n      if (reactor.isMe) {\n        hasMe = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: reactor.isMe && isTouched ? starsAmount : 0,\n        isMe: reactor.isMe,\n        isAnonymous: reactor.isAnonymous,\n        user,\n      });\n    });\n\n    if (!hasMe && isTouched) {\n      const me = selectUser(global, global.currentUserId!);\n      result.push({\n        amount: 0,\n        localAmount: starsAmount,\n        isMe: true,\n        user: me,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount]);\n\n  const chatTitle = chat && getChatTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n    >\n      <BalanceBlock balance={starBalance} className={styles.modalBalance} />\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMe && !shouldShowUp))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey) : getUserFullName(peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      <Checkbox\n        className={styles.checkbox}\n        checked={shouldShowUp}\n        onChange={handleAnonimityChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"modalBalance\":\"Q3560fzx\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"checkbox\":\"oQ5Ar48z\",\"disclaimer\":\"KRvkHeo1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiUser } from '../../../api/types';\nimport type { GiftOption } from './GiftModal';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/ActionMessage';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  userId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  patternColor?: string;\n  user?: ApiUser;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  userId,\n  user,\n  captionLimit,\n  patternColor,\n  currentUserId,\n  isPaymentFormLoading,\n}: OwnProps & StateProps) {\n  const { sendStarGift, openInvoice } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n\n  const isStarGift = 'id' in gift;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: true,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            targetUserIds: [userId],\n            mediaType: 'action',\n            text: 'ActionGiftInbound',\n            type: 'giftPremium',\n            amount: gift.amount,\n            currency: gift.currency,\n            months: gift.months,\n            message: {\n              text: giftMessage,\n            },\n            translationValues: ['%action_origin%', '%gift_payment_amount%'],\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: currentUserId!,\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          targetUserIds: [userId],\n          mediaType: 'action',\n          text: 'ActionGiftInbound',\n          type: 'starGift',\n          currency: STARS_CURRENCY_CODE,\n          amount: gift.stars,\n          starGift: {\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName,\n            starsToConvert: gift.starsToConvert,\n            isSaved: false,\n            isConverted: false,\n            gift,\n          },\n          translationValues: ['%action_origin%', '%gift_payment_amount%'],\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift, shouldHideName, userId]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        userId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [userId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n    return (\n      <div className={styles.optionsSection}>\n        <TextArea\n          className={styles.messageInput}\n          onChange={handleGiftMessageChange}\n          value={giftMessage}\n          label={lang('GiftMessagePlaceholder')}\n          maxLength={captionLimit}\n          maxLengthIndicator={symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined}\n        />\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const userFullName = getUserFullName(user)!;\n\n    const amount = isStarGift\n      ? formatCurrency(gift.stars, STARS_CURRENCY_CODE, lang.code, { iconClassName: 'star-amount-icon' })\n      : formatCurrency(gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && (\n          <div className={styles.description}>\n            {lang('GiftHideNameDescription', { profile: userFullName, receiver: userFullName })}\n          </div>\n        )}\n\n        <div className={styles.spacer} />\n\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'no-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={`--pattern-color: ${patternColor}`}\n      >\n        <ActionMessage key={isStarGift ? gift.id : gift.months} message={localMessage} />\n      </div>\n      {renderOptionsSection()}\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      patternColor,\n    } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      user,\n      patternColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {Boolean(discount) && (\n        <GiftRibbon color=\"red\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n  ApiSticker,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  onClick: (gift: ApiStarGift) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ sticker, gift, onClick }: OwnProps & StateProps) {\n  const { openGiftInfoModal } = getActions();\n  const lang = useLang();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.stickerId];\n\n    return {\n      sticker,\n    };\n  },\n)(GiftItemStar));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n};\n\nconst StarGiftCategoryList = ({\n  starGiftCategoriesByName,\n  onCategoryChanged,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] = useMemo(() => Object.keys(starGiftCategoriesByName)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [starGiftCategoriesByName]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') {\n      return lang('AllGiftsCategory');\n    }\n    if (category === 'limited') {\n      return lang('LimitedGiftsCategory');\n    }\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {category !== 'all' && category !== 'limited' && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {renderCategoryItem('limited')}\n      {starCategories.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGiftCategoriesByName } = global;\n\n    return {\n      starGiftCategoriesByName,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiUser,\n} from '../../../api/types';\nimport type { StarGiftCategory, TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGift>;\n  starGiftCategoriesByName: Record<StarGiftCategory, string[]>;\n  starBalance?: number;\n  user?: ApiUser;\n};\n\nconst PremiumGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftCategoriesByName,\n  starBalance,\n  user,\n}) => {\n  const {\n    closeGiftModal, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [isHeaderHidden, setIsHeaderHidden] = useState(true);\n  const [isHeaderForStarGifts, setIsHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const filteredGifts = useMemo(() => {\n    return renderingModal?.gifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1);\n  }, [renderingModal]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIsHeaderHidden(true);\n      setSelectedGift(undefined);\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (selectedGift) return;\n\n    const { scrollTop } = e.currentTarget;\n\n    setIsHeaderHidden(scrollTop <= 150);\n\n    if (transitionRef.current && giftHeaderRef.current) {\n      const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n      const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n      setIsHeaderForStarGifts(headerTop - transitionTop <= 0);\n    }\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = lang('StarGiftDescription', {\n    user: getUserFullName(user)!,\n  }, { withNodes: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang('StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsHeaderForStarGifts('id' in gift);\n    setIsHeaderHidden(false);\n  });\n\n  function renderStarGifts() {\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && starGiftCategoriesByName[selectedCategory].map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              gift={gift}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (selectedGift) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size=\"huge\"\n            peer={user}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {renderGiftPremiumHeader()}\n        {renderGiftPremiumDescription()}\n\n        {renderPremiumGifts()}\n\n        {renderStarGiftsHeader()}\n        {renderStarGiftsDescription()}\n        <StarGiftCategoryList onCategoryChanged={onCategoryChanged} />\n        <Transition\n          name=\"zoomFade\"\n          activeKey={getCategoryKey(selectedCategory)}\n          className={styles.starGiftsTransition}\n        >\n          {renderStarGifts()}\n        </Transition>\n      </div>\n    );\n  }\n\n  const isBackButton = Boolean(selectedGift);\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} />\n      <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? 'StarsGiftHeader' : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={selectedGift ? 1 : 0}\n      >\n        {!selectedGift && renderMainScreen()}\n        {selectedGift && renderingModal?.forUserId && (\n          <GiftSendingOptions gift={selectedGift} userId={renderingModal.forUserId} />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const { starGiftsById, starGiftCategoriesByName, stars } = global;\n\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById,\n    starGiftCategoriesByName,\n    starBalance: stars?.balance,\n    user,\n  };\n})(PremiumGiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') {\n    return -1;\n  }\n  if (category === 'limited') {\n    return 0;\n  }\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUserId,\n  userIds,\n}) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = userIds ? filterUsersByName(userIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user) && userId !== currentUserId;\n    }));\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"p7FTs7_p\",\"amount\":\"zJS3I8BT\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiSticker, ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getUserFullName } from '../../../../global/helpers';\nimport { selectStarGiftSticker, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatInteger } from '../../../../util/textFormat';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  userFrom?: ApiUser;\n  targetUser?: ApiUser;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal, sticker, userFrom, targetUser, currentUserId, starGiftMaxConvertPeriod,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisilibity,\n    convertGiftToStars,\n    openChatWithInfo,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isUserGift = typeGift && 'gift' in typeGift;\n  const userGift = isUserGift ? typeGift : undefined;\n  const canUpdate = Boolean(userGift?.fromId && userGift.messageId);\n  const isSender = userGift?.fromId === currentUserId;\n  const canConvertDifference = (userGift && starGiftMaxConvertPeriod && (\n    userGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { fromId, messageId, isUnsaved } = userGift!;\n    changeGiftVisilibity({ userId: fromId!, messageId: messageId!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { fromId, messageId } = userGift!;\n    convertGiftToStars({ userId: fromId!, messageId: messageId! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId!, profileTab: 'gifts' });\n    handleClose();\n  });\n\n  const modalData = useMemo(() => {\n    if (!typeGift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, message, starsToConvert, isUnsaved, isConverted,\n    } = userGift || {};\n    const gift = isUserGift ? typeGift.gift : typeGift;\n\n    const isVisibleForMe = isNameHidden && targetUser;\n\n    const description = (() => {\n      if (!userGift) {\n        return lang('GiftInfoSoldOutDescription');\n      }\n      if (!canUpdate && !isSender) return undefined;\n      if (!starsToConvert || canConvertDifference < 0) return undefined;\n      if (isConverted) {\n        return canUpdate\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: formatInteger(starsToConvert!),\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoDescriptionOutConverted', {\n            amount: formatInteger(starsToConvert!),\n            user: getUserFullName(targetUser)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      return canUpdate\n        ? lang('GiftInfoDescription', {\n          amount: starsToConvert,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        })\n        : lang('GiftInfoDescriptionOut', {\n          amount: starsToConvert,\n          user: getUserFullName(targetUser)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n    })();\n\n    const header = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker sticker={sticker} noLoop nonInteractive size={STICKER_SIZE} />\n        <h1 className={styles.title}>\n          {!userGift && lang('GiftInfoSoldOutTitle')}\n          {userGift && lang(canUpdate ? 'GiftInfoReceived' : 'GiftInfoTitle')}\n        </h1>\n        {userGift && (\n          <p className={styles.amount}>\n            <span className={styles.amount}>\n              {formatInteger(gift.stars)}\n            </span>\n            <StarIcon type=\"gold\" size=\"middle\" />\n          </p>\n        )}\n        {description && (\n          <p className={buildClassName(styles.description, !userGift && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (fromId || isNameHidden) {\n      tableData.push([\n        lang('GiftInfoFrom'),\n        fromId ? { chatId: fromId } : (\n          <>\n            <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n            <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n          </>\n        ),\n      ]);\n    }\n\n    if (userGift?.date) {\n      tableData.push([\n        lang('GiftInfoDate'),\n        formatDateTimeToString(userGift.date * 1000, lang.code, true),\n      ]);\n    }\n\n    if (gift.firstSaleDate) {\n      tableData.push([\n        lang('GiftInfoFirstSale'),\n        formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n      ]);\n    }\n\n    if (gift.lastSaleDate) {\n      tableData.push([\n        lang('GiftInfoLastSale'),\n        formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n      ]);\n    }\n\n    tableData.push([\n      lang('GiftInfoValue'),\n      <div className={styles.giftValue}>\n        {formatStarsAsIcon(lang, gift.stars)}\n        {canUpdate && canConvertDifference > 0 && Boolean(starsToConvert) && (\n          <BadgeButton onClick={openConvertConfirm}>\n            {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n          </BadgeButton>\n        )}\n      </div>,\n    ]);\n\n    if (gift.availabilityTotal) {\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoAvailabilityValue', {\n          count: gift.availabilityRemains || 0,\n          total: gift.availabilityTotal,\n        }, {\n          pluralValue: gift.availabilityRemains || 0,\n        }),\n      ]);\n    }\n\n    if (message) {\n      tableData.push([\n        undefined,\n        renderTextWithEntities(message),\n      ]);\n    }\n\n    const footer = (\n      <div className={styles.footer}>\n        {canUpdate && (\n          <div className={styles.footerDescription}>\n            <div>\n              {isUnsaved ? lang('GiftInfoHidden')\n                : lang('GiftInfoSaved', {\n                  link: <Link isPrimary onClick={handleOpenProfile}>{lang('GiftInfoSavedView')}</Link>,\n                }, {\n                  withNodes: true,\n                })}\n            </div>\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {!canUpdate && (\n          <Button size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {canUpdate && (\n          <Button size=\"smaller\" onClick={handleTriggerVisibility}>\n            {lang(isUnsaved ? 'GiftInfoMakeVisible' : 'GiftInfoMakeInvisible')}\n          </Button>\n        )}\n      </div>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [typeGift, userGift, isUserGift, targetUser, sticker, lang, canUpdate, canConvertDifference, isSender, oldLang]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        header={modalData?.header}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        onClose={handleClose}\n      />\n      {userGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoConvertDescription1', {\n              amount: formatStarsAsText(lang, userGift.starsToConvert!),\n              user: getUserFullName(userFrom)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {canConvertDifference > 0 && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isUserGift = typeGift && 'gift' in typeGift;\n    const gift = isUserGift ? typeGift.gift : typeGift;\n    const stickerId = gift?.stickerId;\n    const sticker = stickerId ? selectStarGiftSticker(global, stickerId) : undefined;\n\n    const fromId = isUserGift && typeGift.fromId;\n    const userFrom = fromId ? selectUser(global, fromId) : undefined;\n    const targetUser = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n    return {\n      sticker,\n      userFrom,\n      targetUser,\n      currentUserId: global.currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  footer,\n  buttonText,\n  className,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      isSlim\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PickerSelectedItem\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(option.amount, option.currency, oldLang.code)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'stargift') {\n    const {\n      userId, shouldHideName, giftId, message,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stargift',\n      user,\n      shouldHideName,\n      giftId,\n      message,\n    };\n  }\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option, message,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n        message,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  if (peer.type === 'api') {\n    return {\n      avatarIcon: 'bots',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramBotApi.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramBotApi.Subtitle',\n      peerColorId: 4,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    giveawayPostId: message.id,\n  };\n}\n"],"names":["memo","withGlobal","global","_ref2","modal","user","forUserId","selectUser","getGlobal","undefined","_ref","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","root","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getSenderTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","users","byId","combinedIds","filteredContactIds","filterUsersByName","sortChatIds","unique","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","balance","lang","smallerText","balanceBottom","StarIcon","formatInteger","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","statusPeriod","getTransactionTitle","transaction","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","buildStarsTransactionCustomPeer","titleKey","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","isTransactionPreview","count","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","Icon","name","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","PaidMediaThumb","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS","TRANSACTION_ITEM_CLASS","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","history","subscriptions","useLang","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","shouldShowItems","all","transactions","shouldSuggestGifting","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","BalanceBlock","modalBalance","starButton","topupOptions","tos","list","sectionTitle","StarsSubscriptionItem","key","nextOffset","isText","disabled","isLoading","noForcedUpperCase","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","StarsTransactionItem","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","formatStarsAsText","pluralValue","formatStarsAsIcon","asFont","icon","withNodes","specialReplacement","STARS_ICON_PLACEHOLDER","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","content","paidMedia","paidMediaMessage","paidMediaChat","closeStarsPaymentModal","openStarsBalanceModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","withMarkdown","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","contentClassName","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PickerSelectedItem","botItem","paymentButton","disclaimer","starCount","starsGiftSticker","selectGiftStickerForStars","starGiftStickerId","stickerId","starGiftSticker","selectStarGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","AnimatedIconFromSticker","sticker","play","noLoop","nonInteractive","tableData","push","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","buttonText","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","style","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","appConfig","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","closePaidReactionModal","addLocalPaidReaction","starsAmount","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldShowUp","setShouldShowUp","handleAnonimityChange","target","checked","handleAmountChange","currentReactor","reactions","topReactors","find","reactor","isMe","isAnonymous","handleSend","isPrivate","hasMe","forEach","localAmount","me","sort","a","b","chatTitle","StarSlider","Separator","countText","Checkbox","label","theme","selectTheme","patternColor","themes","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","sendStarGift","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","isStarGift","localMessage","isOutgoing","senderId","action","targetUserIds","mediaType","STARS_CURRENCY_CODE","isNameHidden","starsToConvert","isSaved","isConverted","translationValues","months","handleGiftMessageChange","handleShouldHideNameChange","handleMainButtonClick","inert","ActionMessage","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","ripple","Switcher","renderOptionsSection","userFullName","formatCurrency","iconClassName","profile","receiver","availabilityRemains","PremiumProgress","isPrimary","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","handleGiftClick","perMonth","discount","ceil","tabIndex","role","caption","renderMonths","pill","fluid","GiftRibbon","percent","stickers","starGifts","openGiftInfoModal","isLimited","isSoldOut","withSparkleEffect","starGiftCategoriesByName","onCategoryChanged","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","renderCategoryName","useHorizontalScroll","starGiftsById","boostPerSentGift","boostsPerSentGift","closeGiftModal","transitionRef","giftHeaderRef","selectedGift","setSelectedGift","setIsHeaderHidden","isHeaderForStarGifts","setIsHeaderForStarGifts","filteredGifts","gifts","prevGift","baseGift","reduce","prev","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","handleCloseButtonClick","isBackButton","buttonClassName","slideClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","starGiftsDescription","StarGiftCategoryList","starGiftsTransition","starGiftsContainer","giftId","GiftItemStar","GiftSendingOptions","userSelectionLimit","giveawayAddPeersMax","closeGiftRecipientPicker","openGiftModal","selectedId","typeGift","isUserGift","fromId","userFrom","targetUser","starGiftMaxConvertPeriod","closeGiftInfoModal","changeGiftVisilibity","convertGiftToStars","openChatWithInfo","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","userGift","canUpdate","isSender","canConvertDifference","getServerTime","conversionLeft","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenProfile","profileTab","modalData","isVisibleForMe","soldOut","CUSTOM_PEER_HIDDEN","unknown","firstSaleDate","lastSaleDate","giftValue","BadgeButton","total","renderTextWithEntities","footerDescription","Link","ConfirmDialog","confirmHandler","children","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","headerAvatarPeer","onButtonClick","openChat","handleOpenChat","forceShowSelf","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown","getRequestInputInvoice","boostChannelId","boostChannel","additionalChannelIds","untilDate","areWinnersVisible","countries","isOnlyForNewSubscribers","prizeDescription","additionalChannels","peerColorId","abs","getStarsTransactionFromGift","transactionId","getPrizeStarsTransactionFromGiveaway","targetChatId"],"sourceRoot":""}